<?xml version="1.0" encoding="UTF-8"?>
<project name="WPCleaner" default="main" basedir=".">

  <!-- Properties -->
  <property name="WPCleaner.src.dir"                      value="src" />
  <property name="WPCleaner.build.dir"                    value="build" />
  <property name="WPCleaner.classes_full.dir"             value="${WPCleaner.build.dir}/classes_full" />
  <property name="WPCleaner.classes_install.dir"          value="${WPCleaner.build.dir}/classes_install" />
  <property name="WPCleaner.classes_small.dir"            value="${WPCleaner.build.dir}/classes_small" />
  <property name="WPCleaner.dist.dir"                     value="${WPCleaner.build.dir}/dist" />
  <property name="WPCleaner.tmp.dir"                      value="${WPCleaner.build.dir}/tmp" />
  <property name="WPCleaner.full.dir"                     value="${WPCleaner.dist.dir}/full" />
  <property name="WPCleaner.getdown.dir"                  value="${WPCleaner.dist.dir}/getdown" />
  <property name="WPCleaner.getdown.test.dir"             value="${WPCleaner.dist.dir}/getdown-test" />
  <property name="WPCleaner.install.dir"                  value="${WPCleaner.dist.dir}/install" />
  <property name="WPCleaner.javadoc.dir"                  value="${WPCleaner.dist.dir}/javadoc" />
  <property name="WPCleaner.jnlp.dir"                     value="${WPCleaner.dist.dir}/jnlp" />
  <property name="WPCleaner.libs.dir"                     value="libs" />
  <property name="WPCleaner.res.dir"                      value="resources" />
  <property name="WPCleaner.po.dir"                       value="${WPCleaner.src.dir}/org/wikipediacleaner/translation" />
  <property name="WPCleaner.tasks.dir"                    value="${WPCleaner.res.dir}/tasks" />

  <property name="WPCleaner.libs.getdown.version"         value="1.8.6" />
  <property name="WPCleaner.libs.getdown.dir"             value="libs/getdown-${WPCleaner.libs.getdown.version}" />
  <property name="WPCleaner.libs.getdown.jar"             value="getdown-${WPCleaner.libs.getdown.version}.jar" />
  <property name="WPCleaner.libs.getdown-ant.jar"         value="getdown-ant-${WPCleaner.libs.getdown.version}.jar" />
  <property name="WPCleaner.libs.getdown-core.jar"        value="getdown-core-${WPCleaner.libs.getdown.version}.jar" />
  <property name="WPCleaner.libs.getdown-launcher.jar"    value="getdown-launcher-${WPCleaner.libs.getdown.version}.jar" />

  <property name="WPCleaner.libs.codec.version"           value="1.14" />
  <property name="WPCleaner.libs.codec.dir"               value="libs/commons-codec-${WPCleaner.libs.codec.version}" />
  <property name="WPCleaner.libs.codec.jar"               value="commons-codec-${WPCleaner.libs.codec.version}.jar" />
  <property name="WPCleaner.libs.codec.lic"               value="LICENSE.txt" />
  <property name="WPCleaner.libs.codec.not"               value="NOTICE.txt" />

  <property name="WPCleaner.libs.compress.version"        value="1.20" />
  <property name="WPCleaner.libs.compress.dir"            value="libs/commons-compress-${WPCleaner.libs.compress.version}" />
  <property name="WPCleaner.libs.compress.jar"            value="commons-compress-${WPCleaner.libs.compress.version}.jar" />
  <property name="WPCleaner.libs.compress.lic"            value="LICENSE.txt" />
  <property name="WPCleaner.libs.compress.not"            value="NOTICE.txt" />

  <property name="WPCleaner.libs.gettext.version"         value="0.9.6" />
  <property name="WPCleaner.libs.gettext.dir"             value="libs/gettext-commons-${WPCleaner.libs.gettext.version}" />
  <property name="WPCleaner.libs.gettext.jar"             value="gettext-commons-${WPCleaner.libs.gettext.version}.jar" />
  <property name="WPCleaner.libs.gettext.lic"             value="LICENSE_gettext-commons.txt" />

  <property name="WPCleaner.libs.httpclient.version"      value="3.1" />
  <property name="WPCleaner.libs.httpclient.dir"          value="libs/commons-httpclient-${WPCleaner.libs.httpclient.version}" />
  <property name="WPCleaner.libs.httpclient.jar"          value="commons-httpclient-${WPCleaner.libs.httpclient.version}.jar" />
  <property name="WPCleaner.libs.httpclient.lic"          value="LICENSE.txt" />
  <property name="WPCleaner.libs.httpclient.not"          value="NOTICE.txt" />

  <property name="WPCleaner.libs.jsr305.version"          value="3.0.2" />
  <property name="WPCleaner.libs.jsr305.dir"              value="libs/jsr305-${WPCleaner.libs.jsr305.version}" />
  <property name="WPCleaner.libs.jsr305.jar"              value="jsr305-${WPCleaner.libs.jsr305.version}.jar" />

  <property name="WPCleaner.libs.lang3.version"           value="3.8.1" />
  <property name="WPCleaner.libs.lang3.dir"               value="libs/commons-lang3-${WPCleaner.libs.lang3.version}" />
  <property name="WPCleaner.libs.lang3.jar"               value="commons-lang3-${WPCleaner.libs.lang3.version}.jar" />
  <property name="WPCleaner.libs.lang3.lic"               value="LICENSE.txt" />
  <property name="WPCleaner.libs.lang3.not"               value="NOTICE.txt" />

  <property name="WPCleaner.libs.io.version"              value="2.6" />
  <property name="WPCleaner.libs.io.dir"                  value="libs/commons-io-${WPCleaner.libs.io.version}" />
  <property name="WPCleaner.libs.io.jar"                  value="commons-io-${WPCleaner.libs.io.version}.jar" />
  <property name="WPCleaner.libs.io.lic"                  value="LICENSE.txt" />
  <property name="WPCleaner.libs.io.not"                  value="NOTICE.txt" />

  <property name="WPCleaner.libs.text.version"            value="1.9" />
  <property name="WPCleaner.libs.text.dir"                value="libs/commons-text-${WPCleaner.libs.text.version}" />
  <property name="WPCleaner.libs.text.jar"                value="commons-text-${WPCleaner.libs.text.version}.jar" />
  <property name="WPCleaner.libs.text.lic"                value="LICENSE.txt"/>
  <property name="WPCleaner.libs.text.not"                value="NOTICE.txt"/>

  <property name="WPCleaner.libs.jackson.version"         value="2.10.3" />
  <property name="WPCleaner.libs.jackson.dir"             value="libs/jackson-${WPCleaner.libs.jackson.version}" />
  <property name="WPCleaner.libs.jackson-annotations.jar" value="jackson-annotations-${WPCleaner.libs.jackson.version}.jar" />
  <property name="WPCleaner.libs.jackson-core.jar"        value="jackson-core-${WPCleaner.libs.jackson.version}.jar" />
  <property name="WPCleaner.libs.jackson-databind.jar"    value="jackson-databind-${WPCleaner.libs.jackson.version}.jar" />
  <property name="WPCleaner.libs.jackson.lic"             value="LICENSE.txt" />

  <property name="WPCleaner.libs.jaxb-ri.version"         value="3.0.2" />
  <property name="WPCleaner.libs.jaxb-ri.dir"             value="libs/jaxb-ri-${WPCleaner.libs.jaxb-ri.version}" />
  <property name="WPCleaner.libs.jaxb-ri-bind-api.jar"    value="jakarta.xml.bind-api.jar" />
  <property name="WPCleaner.libs.jaxb-ri.lic"             value="LICENSE.txt" />

  <property name="WPCleaner.libs.jaxen.version"           value="1.1.6" />
  <property name="WPCleaner.libs.jaxen.jar"               value="jaxen-${WPCleaner.libs.jaxen.version}.jar" />
  <property name="WPCleaner.libs.jaxen.lic"               value="LICENSE_jaxen.txt" />

  <property name="WPCleaner.libs.jdom.version"            value="2.0.6" />
  <property name="WPCleaner.libs.jdom.dir"                value="libs/jdom-${WPCleaner.libs.jdom.version}" />
  <property name="WPCleaner.libs.jdom.jar"                value="jdom-${WPCleaner.libs.jdom.version}.jar" />
  <property name="WPCleaner.libs.jdom.lic"                value="LICENSE_jdom.txt" />

  <property name="WPCleaner.libs.logging.version"         value="1.2" />
  <property name="WPCleaner.libs.logging.dir"             value="libs/commons-logging-${WPCleaner.libs.logging.version}" />
  <property name="WPCleaner.libs.logging.jar"             value="commons-logging-${WPCleaner.libs.logging.version}.jar" />
  <property name="WPCleaner.libs.logging.lic"             value="LICENSE.txt" />
  <property name="WPCleaner.libs.logging.not"             value="NOTICE.txt" />

  <property name="WPCleaner.libs.logback.version"         value="1.2.3" />
  <property name="WPCleaner.libs.logback.dir"             value="libs/logback-${WPCleaner.libs.logback.version}" />
  <property name="WPCleaner.libs.logback.classic.jar"     value="logback-classic-${WPCleaner.libs.logback.version}.jar" />
  <property name="WPCleaner.libs.logback.core.jar"        value="logback-core-${WPCleaner.libs.logback.version}.jar" />

  <property name="WPCleaner.libs.mslinks.version"         value="1.0.5" />
  <property name="WPCleaner.libs.mslinks.dir"             value="libs/mslinks-${WPCleaner.libs.mslinks.version}" />
  <property name="WPCleaner.libs.mslinks.jar"             value="mslinks.jar" />
  <property name="WPCleaner.libs.mslinks.lic"             value="LICENSE.txt" />

  <property name="WPCleaner.libs.slf4j.version"           value="1.7.30" />
  <property name="WPCleaner.libs.slf4j.dir"               value="libs/slf4j-${WPCleaner.libs.slf4j.version}" />
  <property name="WPCleaner.libs.slf4j.api.jar"           value="slf4j-api-${WPCleaner.libs.slf4j.version}.jar" />

  <property name="WPCleaner.libs.xerces-impl.jar"         value="xercesImpl.jar" />
  <property name="WPCleaner.libs.xerces-xml-apis.jar"     value="xml-apis.jar" />
  <property name="WPCleaner.libs.xerces.lic"              value="LICENSE_xerces.txt" />
  <property name="WPCleaner.libs.xerces.not"              value="NOTICE_xerces.txt" />

  <property name="WPCleaner.libs.jackson.jars"
            value="${WPCleaner.libs.jackson-annotations.jar} ${WPCleaner.libs.jackson-core.jar} ${WPCleaner.libs.jackson-databind.jar}" />
  <property name="WPCleaner.libs.jdom.jars"
            value="${WPCleaner.libs.jaxen.jar} ${WPCleaner.libs.jdom.jar} ${WPCleaner.libs.xerces-impl.jar} ${WPCleaner.libs.xerces-xml-apis.jar}" />
  <property name="WPCleaner.libs.various.jars"
            value="${WPCleaner.libs.codec.jar} ${WPCleaner.libs.compress.jar} ${WPCleaner.libs.httpclient.jar} ${WPCleaner.libs.logging.jar} ${WPCleaner.libs.gettext.jar}" />
  <property name="WPCleaner.libs.jars"
            value="${WPCleaner.libs.various.jars} ${WPCleaner.libs.jdom.jars}" />

  <property name="all.languages" value="ast,az,bn,ckb,cs,da,de,el,en_GB,eo,es,fa,fr,gl,he,hu,id,is,it,ja,ko,mr,ms,nb,nl,oc,pl,ps,pt_BR,ru,sv,tr,uk,ur,zh_CN" />

  <!-- NOTE:
       gettext.path can be used if gettext tools are not in the path
       or if Ant can't find them (potential problem on MacOSX + Eclipse)
       Set it by running Ant with -Dgettext.path=<path ending with />

       MacOSX+Eclipse: https://bugs.eclipse.org/bugs/show_bug.cgi?id=111193
  -->
  <property name="gettext.path" value="" />
  <property name="gettext.xgettext" value="${gettext.path}xgettext" />
  <property name="gettext.msgmerge" value="${gettext.path}msgmerge" />
  <property name="gettext.msgfmt"   value="${gettext.path}msgfmt" />

  <!-- Properties that can be useful to change the build -->
  <property name="do.create.pot" value="true" />
  <property name="do.create.po"  value="false" />

  <!-- Paths and FileSets -->
  <path id="WPCleaner.class.path">
    <fileset dir="${WPCleaner.libs.dir}">
      <include name="**/*.jar" />
      <exclude name="**/ant-contrib*/*.jar" />
    </fileset>
  </path>
  <fileset id="WPCleaner.java.files" dir="${basedir}/${WPCleaner.src.dir}">
    <include name="**/*.java"/>
  </fileset>

  <!-- <for list ...> construct needs ant-contrib.jar -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${WPCleaner.libs.dir}/ant-contrib-1.0b3/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <!-- getdown tasks -->
  <taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask">
    <classpath>
      <pathelement location="${WPCleaner.libs.getdown.dir}/${WPCleaner.libs.getdown-ant.jar}"/>
      <pathelement location="${WPCleaner.libs.getdown.dir}/${WPCleaner.libs.getdown-core.jar}"/>
    </classpath>
  </taskdef>

  <!-- Deploy WPCleaner on Tools -->
  <target name="deploy" description="Deploy WPCleaner on Tools">
    <input message="Please enter Password for private key for Tools:" addproperty="WPCleaner.deploy.password" />
    <property name="WPCleaner.deploy.keyfile" value="${basedir}/resources/toolforge/toolforge" />
    <property name="WPCleaner.deploy.knownhosts" value="${basedir}/resources/toolforge/known_hosts" />
    <property name="WPCleaner.deploy.host" value="login.toolforge.org" />
    <property name="WPCleaner.deploy.user" value="nicov" />
    <property name="WPCleaner.deploy.tmp.directory" value="/data/project/wpcleaner/tools/tmp" />
    <property name="WPCleaner.deploy.tmp.install.directory" value="${WPCleaner.deploy.tmp.directory}/install" />
    <property name="WPCleaner.deploy.tmp.wpcleaner.directory" value="${WPCleaner.deploy.tmp.directory}/wpcleaner" />
    <property name="WPCleaner.deploy.tmp.wpcleaner.test.directory" value="${WPCleaner.deploy.tmp.directory}/wpcleaner-test" />
    <property name="WPCleaner.deploy.directory" value="/data/project/wpcleaner/public_html" />
    <property name="WPCleaner.deploy.install.directory" value="${WPCleaner.deploy.directory}/install" />
    <property name="WPCleaner.deploy.wpcleaner.directory" value="${WPCleaner.deploy.directory}/wpcleaner" />
    <property name="WPCleaner.deploy.wpcleaner.test.directory" value="${WPCleaner.deploy.directory}/wpcleaner-test" />

    <!-- Copy new installer in temporary folder on Labs -->
    <sshexec host="${WPCleaner.deploy.host}" verbose="true"
             username="${WPCleaner.deploy.user}"
             keyfile="${WPCleaner.deploy.keyfile}"
             passphrase="${WPCleaner.deploy.password}"
             command="rm -Rf ${WPCleaner.deploy.tmp.install.directory}; mkdir ${WPCleaner.deploy.tmp.install.directory}"
             knownhosts="${WPCleaner.deploy.knownhosts}" />
    <scp todir="${WPCleaner.deploy.user}@${WPCleaner.deploy.host}:${WPCleaner.deploy.tmp.install.directory}"
         keyfile="${WPCleaner.deploy.keyfile}"
         passphrase="${WPCleaner.deploy.password}"
         knownhosts="${WPCleaner.deploy.knownhosts}">
      <fileset dir="${WPCleaner.install.dir}" />
    </scp>

    <!-- Copy new test version in temporary folder on Labs -->
    <sshexec host="${WPCleaner.deploy.host}"
             username="${WPCleaner.deploy.user}"
             keyfile="${WPCleaner.deploy.keyfile}"
             passphrase="${WPCleaner.deploy.password}"
             command="rm -Rf ${WPCleaner.deploy.tmp.wpcleaner.test.directory}; mkdir ${WPCleaner.deploy.tmp.wpcleaner.test.directory}"
             knownhosts="${WPCleaner.deploy.knownhosts}" />
    <scp todir="${WPCleaner.deploy.user}@${WPCleaner.deploy.host}:${WPCleaner.deploy.tmp.wpcleaner.test.directory}"
         keyfile="${WPCleaner.deploy.keyfile}"
         passphrase="${WPCleaner.deploy.password}"
         knownhosts="${WPCleaner.deploy.knownhosts}">
      <fileset dir="${WPCleaner.getdown.test.dir}" />
    </scp>

    <!-- Copy new version in temporary folder on Labs -->
    <sshexec host="${WPCleaner.deploy.host}"
             username="${WPCleaner.deploy.user}"
             keyfile="${WPCleaner.deploy.keyfile}"
             passphrase="${WPCleaner.deploy.password}"
             command="rm -Rf ${WPCleaner.deploy.tmp.wpcleaner.directory}; mkdir ${WPCleaner.deploy.tmp.wpcleaner.directory}"
             knownhosts="${WPCleaner.deploy.knownhosts}" />
    <scp todir="${WPCleaner.deploy.user}@${WPCleaner.deploy.host}:${WPCleaner.deploy.tmp.wpcleaner.directory}"
         keyfile="${WPCleaner.deploy.keyfile}"
         passphrase="${WPCleaner.deploy.password}"
         knownhosts="${WPCleaner.deploy.knownhosts}">
      <fileset dir="${WPCleaner.getdown.dir}" />
    </scp>

    <!-- Activate new test version on Labs -->
    <sshexec host="${WPCleaner.deploy.host}"
             username="${WPCleaner.deploy.user}"
             keyfile="${WPCleaner.deploy.keyfile}"
             passphrase="${WPCleaner.deploy.password}"
             command="rm -Rf ${WPCleaner.deploy.wpcleaner.test.directory}; mv ${WPCleaner.deploy.tmp.wpcleaner.test.directory} ${WPCleaner.deploy.wpcleaner.test.directory}"
             knownhosts="${WPCleaner.deploy.knownhosts}" />

    <!-- Activate new installer on Labs -->
    <input message="Do you want to deploy the installer?"
           addproperty="do.deploy.installer"
           defaultvalue="no"
           validargs="yes,no" />
    <if>
      <istrue value="${do.deploy.installer}" />
      <then>
        <sshexec host="${WPCleaner.deploy.host}"
                 username="${WPCleaner.deploy.user}"
                 keyfile="${WPCleaner.deploy.keyfile}"
                 passphrase="${WPCleaner.deploy.password}"
                 command="cp -f ${WPCleaner.deploy.tmp.install.directory}/* ${WPCleaner.deploy.install.directory}"
                 knownhosts="${WPCleaner.deploy.knownhosts}" />
      </then>
    </if>

    <!-- Activate new version on Labs -->
    <input message="Do you want to deploy WPCleaner?"
           addproperty="do.deploy"
           defaultvalue="no"
           validargs="yes,no" />
    <if>
      <istrue value="${do.deploy}" />
      <then>
        <sshexec host="${WPCleaner.deploy.host}"
                 username="${WPCleaner.deploy.user}"
                 keyfile="${WPCleaner.deploy.keyfile}"
                 passphrase="${WPCleaner.deploy.password}"
                 command="rm -Rf ${WPCleaner.deploy.wpcleaner.directory}; mv ${WPCleaner.deploy.tmp.wpcleaner.directory} ${WPCleaner.deploy.wpcleaner.directory}"
                 knownhosts="${WPCleaner.deploy.knownhosts}" />
      </then>
    </if>
  </target>

  <!-- Build WPCleaner -->
  <target name="main" description="Build WPCleaner" depends="init,clean,main-i18n,javadoc">

    <!-- Initialize -->
    <input message="Please enter Password for keystore:" addproperty="WPCleaner.keystore.password" />
    <mkdir dir="${WPCleaner.build.dir}" />
    <mkdir dir="${WPCleaner.classes_full.dir}" />
    <mkdir dir="${WPCleaner.classes_install.dir}" />
    <mkdir dir="${WPCleaner.classes_small.dir}" />
    <mkdir dir="${WPCleaner.tmp.dir}" />
    <mkdir dir="${WPCleaner.dist.dir}" />
    <mkdir dir="${WPCleaner.jnlp.dir}" />
    <mkdir dir="${WPCleaner.full.dir}" />

    <!-- ============================================================================================================== -->
    <!-- Preparation work in ${WPCleaner.classes_small.dir} : copy files, compile Java                                  -->
    <!-- ============================================================================================================== -->

    <!-- Java compilation -->
    <javac srcdir="${WPCleaner.src.dir}"
           destdir="${WPCleaner.classes_small.dir}"
           optimize="on" encoding="UTF-8" target="8" source="8"
           includeantruntime="false">
      <classpath refid="WPCleaner.class.path" />
    </javac>
    <copy todir="${WPCleaner.classes_small.dir}">
      <fileset dir="${WPCleaner.src.dir}">
        <include name="**/*.png"/>
        <include name="**/*.txt.gz"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <copy file="LICENSE.txt" todir="${WPCleaner.classes_small.dir}" />
    <copy file="README.txt" todir="${WPCleaner.classes_small.dir}" />

    <!-- ============================================================================================================== -->
    <!-- Preparation work in ${WPCleaner.classes_full.dir} : copy files, compile Java                                   -->
    <!-- ============================================================================================================== -->

    <!-- Extract libraries -->
    <unzip src="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.jar}"                 dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.jar}"           dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.jar}"       dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.jar}"                       dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.jar}"                 dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.jar}"                   dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.jar}"             dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.classic.jar}"     dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.core.jar}"        dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.slf4j.dir}/${WPCleaner.libs.slf4j.api.jar}"             dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.jar}"             dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-annotations.jar}" dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-core.jar}"        dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-databind.jar}"    dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jaxb-ri.dir}/${WPCleaner.libs.jaxb-ri-bind-api.jar}"    dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jaxen.jar}"                  dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jdom.jar}"                   dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces-impl.jar}"            dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces-xml-apis.jar}"        dest="${WPCleaner.classes_full.dir}" />
    <unzip src="${WPCleaner.libs.jsr305.dir}/${WPCleaner.libs.jsr305.jar}"               dest="${WPCleaner.classes_full.dir}" />
    <delete includeemptydirs="true">
      <fileset dir="${WPCleaner.classes_full.dir}/META-INF" includes="**/*.txt" />
    </delete>

    <!-- Copy various files for including them in the jar -->
    <copy file="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-codec.txt" />
    <copy file="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-codec.txt" />
    <copy file="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-compress.txt" />
    <copy file="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-compress.txt" />
    <copy file="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-httpclient.txt" />
    <copy file="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-httpclient.txt" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-io.txt" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-io.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-text.txt" />
    <copy file="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-text.txt" />
    <copy file="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.lic}"
  	      tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-logging.txt" />
    <copy file="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.not}"
  	      tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-logging.txt" />
    <copy file="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_gettext-commons.txt" />
    <copy file="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_jackson.txt" />
    <copy file="${WPCleaner.libs.jaxb-ri.dir}/${WPCleaner.libs.jaxb-ri.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_jaxb-ri.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jdom.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_jdom.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jaxen.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_jaxen.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_xerces.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_xerces.txt" />
    <copy todir="${WPCleaner.classes_full.dir}">
      <fileset dir="${WPCleaner.classes_small.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- ============================================================================================================== -->
    <!-- Preparation work in ${WPCleaner.classes_install.dir} : copy files, compile Java                                   -->
    <!-- ============================================================================================================== -->

    <!-- Extract libraries -->
    <unzip src="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.jar}"                       dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.jar}"                 dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.classic.jar}"     dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.core.jar}"        dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.mslinks.dir}/${WPCleaner.libs.mslinks.jar}"             dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.slf4j.dir}/${WPCleaner.libs.slf4j.api.jar}"             dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.jar}"             dest="${WPCleaner.classes_install.dir}" />
    <unzip src="${WPCleaner.libs.jsr305.dir}/${WPCleaner.libs.jsr305.jar}"               dest="${WPCleaner.classes_install.dir}" />
    <delete includeemptydirs="true">
      <fileset dir="${WPCleaner.classes_install.dir}/META-INF" includes="**/*.txt" />
    </delete>

    <!-- Copy various files for including them in the jar -->
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-io.txt" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-io.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.not}"
          tofile="${WPCleaner.classes_full.dir}/NOTICE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.mslinks.dir}/${WPCleaner.libs.mslinks.lic}"
          tofile="${WPCleaner.classes_full.dir}/LICENSE_mslinks.txt" />
    <copy file="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.lic}"
          tofile="${WPCleaner.classes_install.dir}/LICENSE_gettext-commons.txt" />
    <copy file="${WPCleaner.res.dir}/getdown/logback.xml"
          tofile="${WPCleaner.classes_install.dir}/logback.xml" />
    <copy todir="${WPCleaner.classes_install.dir}">
      <fileset dir="${WPCleaner.classes_small.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- ============================================================================================================== -->
    <!-- Build work in ${WPCleaner.tmp.dir} : create jar                                                                -->
    <!-- ============================================================================================================== -->

    <!-- Create manifest files -->
    <manifest file="${WPCleaner.tmp.dir}/manifest.txt">
      <attribute name="Application-Library-Allowable-Classes" value="*" />
      <attribute name="Application-Name"                      value="WPCleaner" />
      <attribute name="Caller-Allowable-Codebase"             value="*" />
      <attribute name="Codebase"                              value="*.wmflabs.org" />
      <attribute name="Main-Class"                            value="org.wikipediacleaner.WikipediaCleaner" />
      <attribute name="Permissions"                           value="all-permissions" />
      <attribute name="Specification-Title"                   value="WPCleaner" />
      <attribute name="Specification-Vendor"                  value="NicoV" />
      <attribute name="Trusted-Library"                       value="true" />
      <attribute name="Trusted-Only"                          value="false" />
    </manifest>
    <manifest file="${WPCleaner.tmp.dir}/manifest_install.txt">
      <attribute name="Application-Library-Allowable-Classes" value="*" />
      <attribute name="Application-Name"                      value="WPCleaner" />
      <attribute name="Caller-Allowable-Codebase"             value="*" />
      <attribute name="Codebase"                              value="*.wmflabs.org" />
      <attribute name="Main-Class"                            value="org.wikipediacleaner.Installer" />
      <attribute name="Permissions"                           value="all-permissions" />
      <attribute name="Specification-Title"                   value="WPCleaner" />
      <attribute name="Specification-Vendor"                  value="NicoV" />
      <attribute name="Trusted-Library"                       value="true" />
      <attribute name="Trusted-Only"                          value="false" />
    </manifest>

    <!-- Create simple jar -->
    <jar destfile="${WPCleaner.tmp.dir}/WPCleanerUnsigned.jar"
         manifest="${WPCleaner.tmp.dir}/manifest.txt">
      <fileset dir="${WPCleaner.classes_small.dir}">
        <include name="**/*" />
      </fileset>
    </jar>

    <!-- Create complete jar -->
    <jar destfile="${WPCleaner.tmp.dir}/WikipediaCleanerUnsigned.jar"
         manifest="${WPCleaner.tmp.dir}/manifest.txt">
      <fileset dir="${WPCleaner.classes_full.dir}">
        <include name="**/*" />
      </fileset>
    </jar>

    <!-- Create installer jar -->
    <jar destfile="${WPCleaner.tmp.dir}/WPCleanerInstallerUnsigned.jar"
         manifest="${WPCleaner.tmp.dir}/manifest_install.txt">
      <fileset dir="${WPCleaner.classes_install.dir}">
        <include name="**/*" />
      </fileset>
    </jar>

    <!-- Sign jars -->
    <if>
      <available file="${WPCleaner.res.dir}/certificate/WPCleaner.p12" />
      <then>
        <signjar jar="${WPCleaner.tmp.dir}/WikipediaCleanerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WikipediaCleaner.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WPCleaner.p12"
                 storetype="pkcs12"
                 storepass="${WPCleaner.p12.password}"
                 alias="wpcleaner-sign"
                 keypass="${WPCleaner.p12key.password}"
                 tsaurl="http://time.certum.pl/">
        </signjar>
        <signjar jar="${WPCleaner.tmp.dir}/WPCleanerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WPCleaner.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WPCleaner.p12"
                 storetype="pkcs12"
                 storepass="${WPCleaner.p12.password}"
                 alias="wpcleaner-sign"
                 keypass="${WPCleaner.p12key.password}"
                 tsaurl="http://time.certum.pl/">
        </signjar>
        <signjar jar="${WPCleaner.tmp.dir}/WPCleanerInstallerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WPCleanerInstaller.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WPCleaner.p12"
                 storetype="pkcs12"
                 storepass="${WPCleaner.p12.password}"
                 alias="wpcleaner-sign"
                 keypass="${WPCleaner.p12key.password}"
                 tsaurl="http://time.certum.pl/">
        </signjar>
        <!-- Time Stamping Servers:
             http://time.certum.pl/
             http://dse200.ncipher.com/TSS/HttpTspServer
             http://tsa.safecreative.org/
             http://zeitstempel.dfn.de/
             http://tsa.tecxoft.com/
             http://services.fourit.eu/tsp/tspservice.cgi
        -->
      </then>
      <else>
        <!-- Do not sign, just copy the files
        <signjar jar="${WPCleaner.tmp.dir}/WikipediaCleanerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WikipediaCleaner.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WikipediaCleanerKeystore"
                 storepass="${WPCleaner.keystore.password}"
                 alias="wikipediacleaner" >
        </signjar>
        <signjar jar="${WPCleaner.tmp.dir}/WPCleanerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WPCleaner.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WikipediaCleanerKeystore"
                 storepass="${WPCleaner.keystore.password}"
                 alias="wikipediacleaner" >
        </signjar>
        <signjar jar="${WPCleaner.tmp.dir}/WPCleanerInstallerUnsigned.jar"
                 signedjar="${WPCleaner.tmp.dir}/WPCleanerInstaller.jar"
                 keystore="${WPCleaner.res.dir}/certificate/WikipediaCleanerKeystore"
                 storepass="${WPCleaner.keystore.password}"
                 alias="wikipediacleaner" >
        </signjar>
        -->
        <copy file="${WPCleaner.tmp.dir}/WikipediaCleanerUnsigned.jar" tofile="${WPCleaner.tmp.dir}/WikipediaCleaner.jar" />
        <copy file="${WPCleaner.tmp.dir}/WPCleanerUnsigned.jar" tofile="${WPCleaner.tmp.dir}/WPCleaner.jar" />
        <copy file="${WPCleaner.tmp.dir}/WPCleanerInstallerUnsigned.jar" tofile="${WPCleaner.tmp.dir}/WPCleanerInstaller.jar" />
      </else>
    </if>

    <!-- ============================================================================================================== -->
    <!-- Packaging work for getdown release in ${WPCleaner.getdown.dir} : copy files, generate digest                   -->
    <!-- ============================================================================================================== -->

    <!-- Copy various files -->
    <copy file="${WPCleaner.res.dir}/commons-nuvola-web-broom-64px.png"                  tofile="${WPCleaner.getdown.dir}/WPCleaner.png" />
    <copy file="${WPCleaner.res.dir}/commons-nuvola-web-broom-64px.png"                  tofile="${WPCleaner.getdown.dir}/commons-nuvola-web-broom-64px.png" />
    <copy file="${WPCleaner.res.dir}/commons-nuvola-web-broom.png"                       tofile="${WPCleaner.getdown.dir}/commons-nuvola-web-broom.png" />
    <copy file="${WPCleaner.res.dir}/WPCleaner.ico"                                      todir="${WPCleaner.getdown.dir}" />
    <copy file="${WPCleaner.tmp.dir}/WPCleaner.jar"                                      todir="${WPCleaner.getdown.dir}" />
    <copy file="${WPCleaner.libs.getdown.dir}/${WPCleaner.libs.getdown-launcher.jar}"    tofile="${WPCleaner.getdown.dir}/libs/${WPCleaner.libs.getdown-launcher.jar}" />
    <copy file="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.jar}"                 tofile="${WPCleaner.getdown.dir}/libs/commons-codec.jar" />
    <copy file="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.jar}"           tofile="${WPCleaner.getdown.dir}/libs/commons-compress.jar" />
    <copy file="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.jar}"       tofile="${WPCleaner.getdown.dir}/libs/commons-httpclient.jar" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.jar}"                       tofile="${WPCleaner.getdown.dir}/libs/commons-io.jar" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.jar}"                 tofile="${WPCleaner.getdown.dir}/libs/commons-lang3.jar" />
    <copy file="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.jar}"                   tofile="${WPCleaner.getdown.dir}/libs/commons-text.jar" />
    <copy file="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.jar}"             tofile="${WPCleaner.getdown.dir}/libs/commons-logging.jar" />
    <copy file="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.classic.jar}"     tofile="${WPCleaner.getdown.dir}/libs/logback-classic.jar" />
    <copy file="${WPCleaner.libs.logback.dir}/${WPCleaner.libs.logback.core.jar}"        tofile="${WPCleaner.getdown.dir}/libs/logback-core.jar" />
    <copy file="${WPCleaner.libs.slf4j.dir}/${WPCleaner.libs.slf4j.api.jar}"             tofile="${WPCleaner.getdown.dir}/libs/slf4j-api.jar" />
    <copy file="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.jar}"             tofile="${WPCleaner.getdown.dir}/libs/gettext-commons.jar" />
    <copy file="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-annotations.jar}" tofile="${WPCleaner.getdown.dir}/libs/jackson-annotations.jar" />
    <copy file="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-core.jar}"        tofile="${WPCleaner.getdown.dir}/libs/jackson-core.jar" />
    <copy file="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson-databind.jar}"    tofile="${WPCleaner.getdown.dir}/libs/jackson-databind.jar" />
    <copy file="${WPCleaner.libs.jaxb-ri.dir}/${WPCleaner.libs.jaxb-ri-bind-api.jar}"    tofile="${WPCleaner.getdown.dir}/libs/jaxb-ri-bind-api.jar" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jaxen.jar}"                  tofile="${WPCleaner.getdown.dir}/libs/jaxen.jar" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jdom.jar}"                   tofile="${WPCleaner.getdown.dir}/libs/jdom.jar" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces-impl.jar}"            tofile="${WPCleaner.getdown.dir}/libs/xercesImpl.jar" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces-xml-apis.jar}"        tofile="${WPCleaner.getdown.dir}/libs/xml-apis.jar" />
    <copy file="${WPCleaner.libs.jsr305.dir}/${WPCleaner.libs.jsr305.jar}"               tofile="${WPCleaner.getdown.dir}/libs/jsr305.jar" />
    <copy file="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.lic}"                 tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-codec.txt" />
    <copy file="${WPCleaner.libs.codec.dir}/${WPCleaner.libs.codec.not}"                 tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-codec.txt" />
    <copy file="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.lic}"           tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-compress.txt" />
    <copy file="${WPCleaner.libs.compress.dir}/${WPCleaner.libs.compress.not}"           tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-compress.txt" />
    <copy file="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.lic}"       tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-httpclient.txt" />
    <copy file="${WPCleaner.libs.httpclient.dir}/${WPCleaner.libs.httpclient.not}"       tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-httpclient.txt" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.lic}"                       tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-io.txt" />
    <copy file="${WPCleaner.libs.io.dir}/${WPCleaner.libs.io.not}"                       tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-io.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.lic}"                 tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.lang3.dir}/${WPCleaner.libs.lang3.not}"                 tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-lang3.txt" />
    <copy file="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.lic}"                   tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-text.txt" />
    <copy file="${WPCleaner.libs.text.dir}/${WPCleaner.libs.text.not}"                   tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-text.txt" />
    <copy file="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.lic}"             tofile="${WPCleaner.getdown.dir}/libs/LICENSE_commons-logging.txt" />
    <copy file="${WPCleaner.libs.logging.dir}/${WPCleaner.libs.logging.not}"             tofile="${WPCleaner.getdown.dir}/libs/NOTICE_commons-logging.txt" />
    <copy file="${WPCleaner.libs.gettext.dir}/${WPCleaner.libs.gettext.lic}"             tofile="${WPCleaner.getdown.dir}/libs/LICENSE_gettext-commons.txt" />
    <copy file="${WPCleaner.libs.jackson.dir}/${WPCleaner.libs.jackson.lic}"             tofile="${WPCleaner.getdown.dir}/libs/LICENSE_jackson.txt" />
    <copy file="${WPCleaner.libs.jaxb-ri.dir}/${WPCleaner.libs.jaxb-ri.lic}"             tofile="${WPCleaner.getdown.dir}/libs/LICENSE_jaxb-ri.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jdom.lic}"                   tofile="${WPCleaner.getdown.dir}/libs/LICENSE_jdom.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.jaxen.lic}"                  tofile="${WPCleaner.getdown.dir}/libs/LICENSE_jaxen.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces.lic}"                 tofile="${WPCleaner.getdown.dir}/libs/LICENSE_xerces.txt" />
    <copy file="${WPCleaner.libs.jdom.dir}/${WPCleaner.libs.xerces.not}"                 tofile="${WPCleaner.getdown.dir}/libs/NOTICE_xerces.txt" />
    <copy todir="${WPCleaner.getdown.dir}">
      <fileset dir="${WPCleaner.res.dir}/getdown">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${WPCleaner.getdown.dir}/tasks">
      <fileset dir="${WPCleaner.tasks.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <replace file="${WPCleaner.getdown.dir}/getdown.txt"
             token="libs/getdown-launcher.jar"
             value="libs/${WPCleaner.libs.getdown-launcher.jar}" />
    <replace file="${WPCleaner.getdown.dir}/Bot.bat"
             token="libs/getdown-launcher.jar"
             value="libs/${WPCleaner.libs.getdown-launcher.jar}" />
    <replace file="${WPCleaner.getdown.dir}/Bot.sh"
             token="libs/getdown-launcher.jar"
             value="libs/${WPCleaner.libs.getdown-launcher.jar}" />
    <replace file="${WPCleaner.getdown.dir}/WPCleaner.bat"
             token="libs/getdown-launcher.jar"
             value="libs/${WPCleaner.libs.getdown-launcher.jar}" />
    <replace file="${WPCleaner.getdown.dir}/WPCleaner.sh"
             token="/getdown-launcher.jar"
             value="/${WPCleaner.libs.getdown-launcher.jar}" />
    <digest appdir="${WPCleaner.getdown.dir}"/>

    <!-- ============================================================================================================== -->
    <!-- Packaging work for getdown-test release in ${WPCleaner.getdown.test.dir} : copy files, generate digest         -->
    <!-- ============================================================================================================== -->
    <copy todir="${WPCleaner.getdown.test.dir}">
      <fileset dir="${WPCleaner.getdown.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <replace file="${WPCleaner.getdown.test.dir}/getdown.txt"
             token="https://tools.wmflabs.org/wpcleaner/wpcleaner/"
             value="https://tools.wmflabs.org/wpcleaner/wpcleaner-test/" />
    <digest appdir="${WPCleaner.getdown.test.dir}"/>

    <!-- ============================================================================================================== -->
    <!-- Packaging work for installer in ${WPCleaner.install.dir} : copy files, generate digest                         -->
    <!-- ============================================================================================================== -->
    <copy file="${WPCleaner.tmp.dir}/WPCleanerInstaller.jar" todir="${WPCleaner.install.dir}" />

    <!-- ============================================================================================================== -->
    <!-- Packaging work for JNLP release in ${WPCleaner.jnlp.dir} : copy files                                          -->
    <!--                                                                                                                -->
    <!-- NOTE: This release is not supported anymore, as it requires a valid code signing certificate to work correctly -->
    <!-- ============================================================================================================== -->

    <!-- Copy various files -->
    <copy file="${WPCleaner.res.dir}/.htaccess"                         todir="${WPCleaner.jnlp.dir}" />
    <copy file="${WPCleaner.res.dir}/WikiCleaner.jnlp"                  todir="${WPCleaner.jnlp.dir}" />
    <copy file="${WPCleaner.res.dir}/commons-nuvola-web-broom.png"      todir="${WPCleaner.jnlp.dir}" />
    <copy file="${WPCleaner.res.dir}/commons-nuvola-web-broom-64px.gif" todir="${WPCleaner.jnlp.dir}" />
    <copy file="${WPCleaner.res.dir}/WPCleaner.ico"                     todir="${WPCleaner.jnlp.dir}" />
    <copy file="${WPCleaner.tmp.dir}/WikipediaCleaner.jar"              todir="${WPCleaner.jnlp.dir}" />

    <!-- ============================================================================================================== -->
    <!-- Packaging work for basic release in ${WPCleaner.full.dir} : copy files                                         -->
    <!-- ============================================================================================================== -->

    <!-- Copy various files -->
    <copy file="${WPCleaner.tmp.dir}/WikipediaCleaner.jar" todir="${WPCleaner.full.dir}" />
  </target>

  <!-- Initialize build -->
  <target name="init">
    <tstamp />
  </target>

  <!-- Clean -->
  <target name="clean">
    <delete dir="${WPCleaner.build.dir}"/>
  </target>

  <!-- Documentation -->
  <target name="javadoc">
    <mkdir dir="${WPCleaner.javadoc.dir}" />
    <javadoc destdir="${WPCleaner.javadoc.dir}"
             sourcepath="${WPCleaner.src.dir}"
             packagenames="org.wikipediacleaner.*"
             encoding="UTF-8"
             access="public"
             failonwarning="true" failonerror="true">
      <classpath refid="WPCleaner.class.path" />
      <link href="https://docs.oracle.com/en/javase/17/docs/api/" />
    </javadoc>
  </target>

  <!-- i18n -->
  <target name="main-i18n"
          depends="init,clean,update-pot,update-po,update-catalog,tar-i18n"/>

  <!-- Manage .pot files -->
  <target name="update-pot" depends="create-pot"/>

  <target name="check-uptodate-pot">
    <condition property="uptodate-pot">
      <uptodate targetfile="${WPCleaner.po.dir}/tstamp.WikiCleaner.pot_">
        <srcfiles refid="WPCleaner.java.files"/>
        <srcfiles file="${WPCleaner.po.dir}/WikiCleaner.pot"/>
      </uptodate>
    </condition>
  </target>

  <target name="create-pot"
          depends="check-executables,check-uptodate-pot"
          if="exist_xgettext" unless="uptodate-pot">
    <if>
      <istrue value="${do.create.pot}" />
      <then>
        <echo message="Generating WPCleaner.pot (gettext PO-template) file in ${WPCleaner.po.dir} ..." level="info"/>
        <delete file="${WPCleaner.po.dir}/tstamp.WikiCleaner.pot_"/>
        <!-- generate new WikiCleaner.pot -->
        <mkdir dir="${WPCleaner.po.dir}/tmp"/>
        <pathconvert pathsep="${line.separator}" dirsep="/"
                     property="WPCleaner.java.files.converted" refid="WPCleaner.java.files">
          <map from="${basedir}/${WPCleaner.src.dir}/" to="" />
        </pathconvert>
        <echo file="${WPCleaner.po.dir}/tmp/files.txt">${WPCleaner.java.files.converted}</echo>
        <apply executable="${gettext.xgettext}" dir="${basedir}/${WPCleaner.src.dir}" parallel="true"
               verbose="true" relative="true" forwardslash="true" addsourcefile="false">
          <arg value="-kGT._T" />
          <arg value="-kGT._No" />
          <arg value="-kGT.__:1,2" />
          <arg value="--from-code=utf-8" />
          <arg value="--language=Java" />
          <arg value="--no-wrap" />
          <arg value="--msgid-bugs-address=https://phabricator.wikimedia.org/project/board/4842/"/>
          <arg value="--output-dir=${basedir}/${WPCleaner.po.dir}/tmp" />
          <arg value="--output=WikiCleaner.pot" />
          <arg value="--files-from=${basedir}/${WPCleaner.po.dir}/tmp/files.txt" />
          <fileset refid="WPCleaner.java.files" />
        </apply>
        <if>
          <and>
            <available file="${WPCleaner.po.dir}/WikiCleaner.pot"/>
            <available file="${WPCleaner.po.dir}/tmp/WikiCleaner.pot"/>
          </and>
          <then>
            <!-- compare both WikiCleaner.pot files -->
            <copy file="${WPCleaner.po.dir}/WikiCleaner.pot"
                  tofile="${WPCleaner.po.dir}/tmp/WikiCleaner.old.pot"/>
            <antcall target="shrink-pot-file">
              <param name="remove_pot_file" value="${WPCleaner.po.dir}/tmp/WikiCleaner.old.pot"/>
            </antcall>
            <copy file="${WPCleaner.po.dir}/tmp/WikiCleaner.pot"
                  tofile="${WPCleaner.po.dir}/tmp/WikiCleaner.new.pot"/>
            <antcall target="shrink-pot-file">
              <param name="remove_pot_file" value="${WPCleaner.po.dir}/tmp/WikiCleaner.new.pot"/>
            </antcall>
            <if>
              <not>
                <filesmatch file1="${WPCleaner.po.dir}/tmp/WikiCleaner.old.pot"
                            file2="${WPCleaner.po.dir}/tmp/WikiCleaner.new.pot"/>
              </not>
              <then>
                <copy file="${WPCleaner.po.dir}/tmp/WikiCleaner.pot"
                      tofile="${WPCleaner.po.dir}/WikiCleaner.pot"/>
              </then>
            </if>
          </then>
          <else>
            <if>
              <available file="${WPCleaner.po.dir}/tmp/WikiCleaner.pot"/>
              <then>
                <copy file="${WPCleaner.po.dir}/tmp/WikiCleaner.pot"
                      tofile="${WPCleaner.po.dir}/WikiCleaner.pot"/>
              </then>
            </if>
          </else>
        </if>
        <touch file="${WPCleaner.po.dir}/tstamp.WikiCleaner.pot_"/>
        <delete dir="${WPCleaner.po.dir}/tmp"/>
      </then>
      <else>
        <echo message="Skipping generation of WikiCleaner.pot (gettext PO-template)" />
      </else>
    </if>
  </target>

  <!-- Manage .po files -->
  <target name="update-po" depends="create-po"/>

  <target name="create-po" depends="check-executables" if="exist_msgmerge">
    <if>
      <istrue value="${do.create.po}" />
      <then>
        <for list="${all.languages}" delimiter=","
             param="current.language">
          <sequential>
            <antcall target="update-po-lang">
              <param name="WPCleaner_lang_value" value="@{current.language}"/>
            </antcall>
          </sequential>
        </for>
      </then>
      <else>
        <echo message="Skipping generation of .po gettext files for WPCleaner" />
      </else>
    </if>
  </target>  

  <target name="check-uptodate-po">
    <condition property="uptodate-po-${WPCleaner_lang_value}">
      <uptodate targetfile="${WPCleaner.po.dir}/tstamp.${WPCleaner_lang_value}.po_">
        <srcfiles file="${WPCleaner.po.dir}/WikiCleaner.pot"/>
        <srcfiles file="${WPCleaner.po.dir}/${WPCleaner_lang_value}.po"/>
      </uptodate>
    </condition>
  </target>

  <target name="update-po-lang"
          depends="check-uptodate-po"
          if="exist_msgmerge" unless="uptodate-po-${WPCleaner_lang_value}">
    <echo message="Updating wikicleaner-${WPCleaner_lang_value}.po gettext file for WPCleaner ..." level="info"/>
    <delete file="${WPCleaner.po.dir}/tstamp.${WPCleaner_lang_value}.po_"/>
    <exec executable="${gettext.msgmerge}" dir="${basedir}/${WPCleaner.po.dir}">
      <arg line="-U --no-wrap ${WPCleaner_lang_value}.po WikiCleaner.pot"/>
    </exec>
    <touch file="${WPCleaner.po.dir}/tstamp.${WPCleaner_lang_value}.po_"/>
    <delete file="${WPCleaner.po.dir}/${WPCleaner_lang_value}.po~"/>
  </target>

  <!-- Manage catalog files -->
  <target name="update-catalog" depends="create-catalog">
  </target>

  <target name="create-catalog"
          depends="check-executables" if="exist_msgfmt">
    <for list="${all.languages}" delimiter=","
         param="current.language">
      <sequential>
        <antcall target="update-catalog-lang">
          <param name="WPCleaner_lang_value" value="@{current.language}"/>
        </antcall>
      </sequential>
    </for>
  </target>  

  <target name="check-uptodate-catalog">
    <mkdir dir="${WPCleaner.classes_small.dir}/org/wikipediacleaner/i18n"/>
    <condition property="uptodate-catalog-${WPCleaner_lang_value}">
      <uptodate srcfile="${WPCleaner.po.dir}/${WPCleaner_lang_value}.po"
                targetfile="${WPCleaner.classes_small.dir}/org/wikipediacleaner/i18n/Messages_${WPCleaner_lang_value}.class"/>
    </condition>
  </target>

  <target name="update-catalog-lang"
          depends="check-uptodate-catalog"
          if="exist_msgfmt" unless="uptodate-catalog-${WPCleaner_lang_value}">
    <echo message="Updating messages_${WPCleaner_lang_value}.class file for WPCleaner ..." level="info"/>
    <exec executable="${gettext.msgfmt}" dir="${basedir}/${WPCleaner.po.dir}">
      <arg value="--statistics"/>
      <arg value="--java2"/>
      <arg value="-l"/>
      <arg value="${WPCleaner_lang_value}"/>
      <arg value="-d"/>
      <arg value="${basedir}/${WPCleaner.classes_small.dir}"/>
      <arg value="-r"/>
      <arg value="org.wikipediacleaner.i18n.Messages"/>
      <arg value="${WPCleaner_lang_value}.po"/>
    </exec>
  </target>

  <!-- Manage catalog files -->
  <target name="tar-i18n">
    <delete file="${WPCleaner.po.dir}/WikiCleaner.tgz"/>
    <tar tarfile="${WPCleaner.po.dir}/WikiCleaner.tgz" compression="gzip">
      <tarfileset dir="${WPCleaner.po.dir}" includes="**/*.pot,**/*.po"/>
    </tar>
  </target>

  <!-- General i18n targets -->
  <target name="check-executables" unless="exist_executable">

    <!-- checking for xgettext -->
    <exec executable="${gettext.xgettext}" dir="${WPCleaner.src.dir}"
          failonerror="false" failifexecutionfails="false"
          outputproperty="ouput_xgettext"
          resultproperty="result_xgettext">
      <arg value="--help"/>
    </exec>
    <if>
      <equals arg1="0" arg2="${result_xgettext}"/>
      <then>
        <property name="exist_xgettext" value="true"/>
      </then>
    </if>

    <!-- checking for msgmerge -->
    <exec executable="${gettext.msgmerge}" dir="${WPCleaner.src.dir}"
          failonerror="false" failifexecutionfails="false"
          outputproperty="ouput_msgmerge"
          resultproperty="result_msgmerge">
      <arg value="--help"/>
    </exec>
    <if>
      <equals arg1="0" arg2="${result_msgmerge}"/>
      <then>
        <property name="exist_msgmerge" value="true"/>
      </then>
    </if>

    <!-- checking for msgfmt -->
    <exec executable="${gettext.msgfmt}" dir="${WPCleaner.src.dir}"
          failonerror="false" failifexecutionfails="false"
          outputproperty="ouput_msgfmt"
          resultproperty="result_msgfmt">
      <arg value="--help"/>
    </exec>
    <if>
      <equals arg1="0" arg2="${result_msgfmt}"/>
      <then>
        <property name="exist_msgfmt" value="true"/>
      </then>
    </if>

    <!-- global checking -->
    <if>
      <and>
        <equals arg1="${exist_xgettext}" arg2="true"/>
        <equals arg1="${exist_msgmerge}" arg2="true"/>
        <equals arg1="${exist_msgfmt}"   arg2="true"/>
      </and>
      <then>
        <property name="exist_executable" value="true"/>
      </then>
      <else>
        <property name="exist_executable" value="false"/>
        <echo level="warning">
          The gettext tools are not available.
          They are needed if you want to build a version of WikipediaCleaner with translations in other languages.
          Otherwise, you dont need them.
          ----------------------------------------------
          Homepage: http://www.gnu.org/software/gettext/
          Win32: http://gnuwin32.sourceforge.net/packages/gettext.htm
        </echo>
      </else>
    </if>
  </target>

  <target name="shrink-pot-file">
    <!-- Remove "POT-Creation-Date -->
    <replaceregexp file='${remove_pot_file}'
                   match='"POT-Creation-Date:(.*)"'
                   replace='' flags='g'/>
    <!-- Remove source files/lines -->
    <replaceregexp file='${remove_pot_file}'
                   match='#:(.*)'
                   replace='' flags='g'/>
  </target>
</project>
